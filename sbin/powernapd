#!/usr/bin/python
#
#    powernapd - monitor a system process table; if IDLE amount of time
#               goes by with no MONITORED_PROCESSES running, run ACTION
#
#    Copyright (C) 2009 Canonical Ltd.
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#             Andres Rodriguez <andreserl@ubuntu.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Imports
import commands
import logging, logging.handlers
import os
import re
import signal
import sys
import time
import socket, traceback
import struct
from powernap import powernap


# Initialize Powernap. This initialization loads the config file.
try:
    powernap = powernap.PowerNap()
    os.putenv("ACTION_METHOD", str(powernap.ACTION_METHOD))
except:
    print("Unale to initialize PowerNap")
    sys.exit(1)

# Define globals
global LOCK, CONFIG, MONITORS
LOCK = "/var/run/%s.pid" % powernap.PKG
LOG = "/var/log/%s.log" % powernap.PKG

logging.basicConfig(filename=LOG, format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d_%H:%M:%S', level=logging.DEBUG,)

# Generic debug function
def debug(level, msg):
    if level >= (logging.ERROR - 10*powernap.DEBUG):
        logging.log(level, msg)

# Generic error function
def error(msg):
    debug(logging.ERROR, msg)
    sys.exit(1)

# Lock function, using a pidfile in /var/run
def establish_lock():
    if os.path.exists(LOCK):
        f = open(LOCK,'r')
        pid = f.read()
        f.close()
        error("Another instance is running [%s]" % pid)
    else:
        try:
            f = open(LOCK,'w')
        except:
            error("Administrative privileges are required to run %s" % powernap.PKG);
        f.write(str(os.getpid()))
        f.close()
        # Set signal handlers
        signal.signal(signal.SIGHUP, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGQUIT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGUSR1, take_action_handler)

# Clean up lock file on termination signals
def signal_handler(signal, frame):
    if os.path.exists(LOCK):
        os.remove(LOCK)
    debug(logging.INFO, "Stopping %s" % powernap.PKG)
    sys.exit(1)

# Check /dev/*, such that we don't powernap the system if someone
# is actively using a terminal device
def get_console_activity():
    dev = commands.getoutput("ls -t /dev").split('\n')
    c = 0
    d = "/dev/null"
    # Find the most recently touched device
    for d in dev:
      d = "/dev/%s" % d
      debug(logging.DEBUG, "      Examining [%s]" % d)
      if os.path.isdir(d):
          pass
      else:
          t = os.stat(d)
          c = time.time() - t.st_mtime
          break
    i = get_interrupts()
    return c, d, i

# Read keyboard/mouse from /proc/interrupts
# Note: only works for ps2 keyboards/mice
def get_interrupts():
    interrupts = 0
    f = open("/proc/interrupts", "r")
    for line in f.readlines():
        items = line.split()
        source = items.pop()
        if source == "i8042" or source == "keyboard" or source == "mouse":
            items.pop(0)
            items.pop()
            for i in items:
                interrupts += int(i)
    f.close()
    return interrupts

# Send a message to system users, that we're about to take an action,
# and sleep for a grace period
def warn_users():
    msg1 = "PowerNap will take the following action in [%s] seconds: [%s]" % (powernap.GRACE_SECONDS, powernap.ACTION)
    msg2 = "To cancel this operation, press any key in any terminal"
    debug(logging.WARNING, msg1)
    commands.getoutput("echo '%s\n%s' | wall" % (msg1, msg2))
    t = 0
    c, d, last_i = get_console_activity()
    while t < powernap.GRACE_SECONDS:
        time.sleep(powernap.INTERVAL_SECONDS)
        t += powernap.INTERVAL_SECONDS
        c, d, i = get_console_activity()
        if c < powernap.INTERVAL_SECONDS or i != last_i:
            msg = "PowerNap detected activity on [%s]; Canceling action [%s]" % (d, powernap.ACTION)
            debug(logging.WARNING, msg)
            commands.getoutput("echo '%s' | wall" % msg)
            return 1
        last_i = i
    return 0

# TODO: notify authorities about action taken
def notify_authorities():
    debug(logging.WARNING, "Taking action [%s]" % powernap.ACTION)

# Recover action for ACTION_METHOD=4 (pm-powersave).
# TODO-andreserl: Find a better way to do this. Maybe involving ACTION variable and passing a false?
def take_recover_action():
    recover = "/usr/sbin/pm-powersave false"
    debug(logging.DEBUG, "Taking recover action [%s]" % recover)
    os.system(recover)

# Zero the counters and take the action
def take_action():
    notify_authorities()
    debug(logging.DEBUG, "Reseting counters prior to taking action")
    for monitor in MONITORS:
        monitor._absent_seconds = 0
    os.system(powernap.ACTION)

# Handler for asynchronous external signals
def take_action_handler(signal, frame):
    take_action()

# Obtain MAC address from Monitor Interface
def get_mac_address(iface):
    file = "/sys/class/net/%s/address" % iface
    f = open(file, 'r')
    iface = f.read()
    f.close
    return iface.strip()

# Generate WoL data for local interface to compare with received packet (Partially taken from powerwake)
def get_local_wol_data(mac):
    nonhex = re.compile('[^0-9a-fA-F]')
    mac = nonhex.sub('', mac)
    if len(mac) != 12:
        error("Malformed mac address [%s]" % mac)
    data = ''.join(['FFFFFFFFFFFF', mac * 20])
    wol_data = ''
    for i in range(0, len(data), 2):
        wol_data = ''.join([wol_data, struct.pack('B', int(data[i: i + 2], 16))])
    return wol_data

# Obtain a list of available eth's, with its MAC address and WoL data.
def get_eths_mac_wol_info():
    ifaces = []
    prefix = re.compile("eth")
    dirs = os.listdir("/sys/class/net")
    for iface in dirs:
        if prefix.search(iface):
            # Obtain MAC address
            mac = get_mac_address(iface)
            # Obtain WoL data of eth
            data = get_local_wol_data(mac)
            ifaces.append({"iface":iface, "mac":mac, "wol":data})
    return ifaces

# WoL Monitor
def start_wol_monitor():
    isRunning = False
    host = '' # Bind to all interfaces
    port = 7
    ifaces = get_eths_mac_wol_info()

    # Prepare the socket and bind port
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.bind((host, port))
        isRunning = True
    except:
        error("Unable to bind port [%s]" % port)
        return

    while isRunning:
        try:
            debug(logging.DEBUG, "    WoL monitor started at port [%s]" % port)
            recv_wol_msg, address = s.recvfrom(1024)
            debug(logging.DEBUG, "    WoL packet received from %s" % address[0])
            for iface in ifaces:
                if recv_wol_msg == iface["wol"]:
                    debug(logging.DEBUG, "    WoL data matches local interface [%s]" % iface["iface"])
                    isRunning = False
                    break
            # Acknowledge it.
            #s.sendto("I am here", address)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            traceback.print_exc()

def powernapd_loop():

    # Starting the Monitors
    for monitor in MONITORS:
        debug(logging.DEBUG, "Starting [%s:%s]" % (monitor._type, monitor._name))
        monitor.start()

    last_i = 0
    while 1:
        debug(logging.DEBUG, "Sleeping [%d] seconds" % powernap.INTERVAL_SECONDS)
        time.sleep(powernap.INTERVAL_SECONDS)
        # Examine process table, compute absent time of each monitored process
        debug(logging.DEBUG, "Examining Monitors")
        absent_monitors = 0
        for monitor in MONITORS:
            debug(logging.DEBUG, "  Looking for [%s] %s" % (monitor._name, monitor._type))
            if monitor.active():
                monitor._absent_seconds = 0
                debug(logging.DEBUG, "    Activity found, reset absent time [%d/%d]" % (monitor._absent_seconds, powernap.ABSENT_SECONDS))
            else:
                # process not running, increment absent time
                monitor._absent_seconds += powernap.INTERVAL_SECONDS
                debug(logging.DEBUG, "    Activity not found, increment absent time [%d/%d]" % (monitor._absent_seconds, powernap.ABSENT_SECONDS))
                if monitor._absent_seconds >= powernap.ABSENT_SECONDS:
                    # process missing for >= absent_seconds threshold, mark absent
                    debug(logging.DEBUG, "    Acitivity absent for >= threshold, so mark absent")
                    absent_monitors += 1
        # Determine if action needs to be taken
        if absent_monitors > 0 and absent_monitors == len(MONITORS):
            debug(logging.DEBUG, "    Checking for console or terminal activity")
            c, d, i = get_console_activity()
            if c > powernap.ABSENT_SECONDS and i == last_i:
                last_i = i
                # All processes are absent, take action!
                if warn_users() == 0:
                    take_action()
                    # Starts WoL Monitor if ACTION_METHOD is set to powersave. Waits here until a matching WoL packet is received
                    # This monitor will only work when entering on 'pm-powersave', and will only wakeup when a matching WoL packet
                    # for the default interface is received
                    # TODO - provide method to define default interface
                    if powernap.ACTION_METHOD == 4:
                        debug(logging.DEBUG, "Starting WoL monitor")
                        # Start WoL Monitor. Returns when WoL packet has been received
                        # TODO - What happens if cannot bind port after taking an action?
                        start_wol_monitor()
                        # Takes recover action for ACTION_METHOD = 4, when returning from WoL Monitor
                        take_recover_action()
            else:
                last_i = i
                debug(logging.DEBUG, "    There appears to be activity on [%s] within the last [%d] seconds" % (d, powernap.ABSENT_SECONDS))

# "Forking a Daemon Process on Unix" from The Python Cookbook
def daemonize (stdin="/dev/null", stdout="/var/log/%s.log" % powernap.PKG, stderr="/var/log/%s.err" % powernap.PKG):
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #1 failed: (%d) %sn" % (e.errno, e.strerror))
        sys.exit(1)
    os.chdir("/")
    os.setsid()
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #2 failed: (%d) %sn" % (e.errno, e.strerror))
        sys.exit(1)
    f = open(LOCK,'w')
    f.write(str(os.getpid()))
    f.close()
    for f in sys.stdout, sys.stderr: f.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


# Main program
if __name__ == '__main__':
    # Ensure that only one instance runs
    establish_lock()
    daemonize()
    try:
        # Run the main powernapd loop
        MONITORS = powernap.get_monitors()
        debug(logging.INFO, "Starting %s" % powernap.PKG)
        powernapd_loop()
    finally:
        # Clean up the lock file
        if os.path.exists(LOCK):
            os.remove(LOCK)
