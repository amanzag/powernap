#!/usr/bin/python
#
#    powernapd - monitor a system process table; if IDLE amount of time
#               goes by with no MONITORED_PROCESSES running, run ACTION
#    Copyright (C) 2009 Canonical Ltd.
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#             Adam Sutton <dev@adamsutton.me.uk>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# #########################################################################
# Imports
# #########################################################################

import commands
import logging, logging.handlers
import os
import re
import signal
import sys
import time

# #########################################################################
# Configuration
# #########################################################################

PKG      = 'powernap'
CONFIG   = {
  'log'               : '/var/log/%s.log' % PKG,
  'lock'              : '/var/run/%s.pid' % PKG,
  'interval'          : 1.0,
  'absent'            : sys.maxint,
  'grace'             : 60.0,
  'debug'             : 0,
  'daemon'            : True,
  'action'            : '/usr/sbin/powernap',
  'monitor_procs'     : [],
  'monitor_io_procs'  : [],
}
RUNNING     = True
PROCESSES   = []

# Config signal handler
def sig_handler_config ( sig, frame ):
    if ( sig == signal.SIGHUP ):
        debug(logging.DEBUG, 'TODO: do we need config reload support?')

# Load configuration
def load_config ():
    global PKG, CONFIG
    from optparse import OptionParser
    from ConfigParser import ConfigParser

    # Build options
    optp = OptionParser()
    optp.add_option("-c", "--config", dest="config",
                    default=None,
                    help="Specify an alternative configuration file")
    optp.add_option("-l", "--log", dest="log",
                    default=None,
                    help="Specify an alternative log file")
    optp.add_option("-i", "--interval", dest="interval",
                    default=None, type='float',
                    help="Specify interval period in seconds")
    optp.add_option("-a", "--absent", dest="absent",
                    default=None, type='float',
                    help="Specify global absent period in seconds")
    optp.add_option("-g", "--grace", dest="grace",
                    default=None, type='float',
                    help="Specify global grace period in seconds")
    optp.add_option("-d", "--debug", dest="debug",
                    default=None, type='int',
                    help="Specify level of debug logging")
    optp.add_option("--nodaemon", dest="daemon",
                    default=None,
                    action='store_false',
                    help="Do not run as a daemon process")
    optp.add_option('--udp', dest='udp_ports',
                    default=[], action='append', type='int',
                    help='Specify a UDP port receive wakeup messages on')
    optp.add_option('--proc', dest='procs',
                    default=[], action='append',
                    help='Specify a static process to monitor (regexp)')
    optp.add_option('--ioproc', dest='io_procs',
                    default=[], action='append',
                    help='Specify an IO based process to monitor (regexp)')

    # Parse command line
    (opts,args) = optp.parse_args()

    # Get config file path
    conf_path   = '/etc/%s/config' % PKG
    if ( opts.config ): conf_path = opts.config

    # Load config file
    cfgp = ConfigParser()
    if ( os.path.isfile(conf_path) ): cfgp.read([conf_path])

    # Update from config file
    if cfgp.has_section('global'):
      for k, v in cfgp.items('global'):
        CONFIG[k] = eval(v)
        # TODO: how safe is this?

    # Update from command line
    if opts.log       != None: CONFIG['log']       = opts.log
    if opts.debug     != None: CONFIG['debug']     = opts.debug
    if opts.interval  != None: CONFIG['interval']  = opts.interval
    if opts.absent    != None: CONFIG['absent']    = opts.absent
    if opts.grace     != None: CONFIG['grace']     = opts.grace
    if opts.daemon    != None: CONFIG['daemon']    = opts.daemon
    if opts.procs:             CONFIG['monitor_procs']     = opts.procs
    if opts.io_procs:          CONFIG['monitor_io_procs']  = opts.io_procs

# ###########################################################################
# Logging
# ###########################################################################

logging.basicConfig(filename=CONFIG['log'], format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d_%H:%M:%S', level=logging.NOTSET,)

# Generic debug function
def debug(level, msg):
    global CONFIG
    if level >= (logging.ERROR - 10*CONFIG['debug']):
        logging.log(level, msg)

# Generic error function
def error(msg):
    debug(logging.ERROR, msg)
    sys.exit(1)

# ###########################################################################
# Daemon Setup
# ###########################################################################

# "Forking a Daemon Process on Unix" from The Python Cookbook
def daemonize (stdin="/dev/null", stdout="/var/log/%s.log" % PKG, stderr="/var/log/%s.err" % PKG):

    # First fork
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #1 failed: (%d) %sn" % (e.errno, e.strerror))
        sys.exit(1)

    # Setup environment
    os.chdir("/")
    os.setsid()

    # Second fork
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #2 failed: (%d) %sn" % (e.errno, e.strerror))
        sys.exit(1)

    # File handles
    for f in sys.stdout, sys.stderr: f.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

# Create PID file (locked)
def create_pid ():
    global CONFIG
    import fcntl
    f = None
    try:
        f = open(CONFIG['lock'], 'w')
    except:
        error("Administrative privileges are required to run %s" % PKG);
   
    try:
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.write(str(os.getpid()))
    except:
        error("Another instance is running [%s]" % f.read())

# Setup signal handlers
def setup_signal_handlers ():
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGQUIT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGUSR1, take_action_handler)

# Clean up lock file on termination signals
def signal_handler(signal, frame):
    debug(logging.INFO, "Stopping %s" % PKG)
    sys.exit(1)

# ###########################################################################
# Action Handling / Alerts
# ###########################################################################

# Send a message to system users, that we're about to take an action,
# and sleep for a grace period
def alert_warn_users ():
    global CONFIG
    msg1 = "PowerNap will take the following action in [%s] seconds: [%s]" % (CONFIG['grace'], CONFIG['action'])
    msg2 = "To cancel this operation, press any key in any terminal"
    debug(logging.WARNING, msg1)
    commands.getoutput("echo '%s\n%s' | wall" % (msg1, msg2))

# Inform the user suspend has been cancelled
def alert_user_cancelled ():
    global CONFIG
    msg = "PowerNap detected activity. Canceling action [%s]" % CONFIG['action']
    debug(logging.WARNING, msg)
    commands.getoutput("echo '%s' | wall" % msg)

# TODO: notify authorities about action taken
def notify_authorities():
    global CONFIG
    debug(logging.WARNING, "Taking action [%s]" % CONFIG['action'])

# Zero the counters and take the action
def take_action():
    global CONFIG, PROCESSES
    notify_authorities()
    os.system(CONFIG['action'])

# Handler for asynchronous external signals
def take_action_handler(signal, frame):
    if ( sig == signal.SIGUSR1 ): take_action()

# ###########################################################################
# Monitors
# ###########################################################################

# Define Process object to hold regex and absence counter
class Process(object):
    def __init__(self, process, io=False):
        self.process = process
        self.regex = re.compile(process)
        self.absent_seconds = 0
        self.check_io = io
        self.pid_table = {}
    def __repr__(self):
        return self.process + " (IOmonitor: %s)"%self.check_io

# Search process list for regex, if requested run a check for IO activity
def find_process(ps, p):
    pids = []
    found = False

    for str in ps:
        proc = str.strip().partition(' ') # Extract the pid of a process
        if p.regex.search(proc[2]):
            if not p.check_io:
                return 1 # Not interested in IO. Return on first match.
            else:
                pids.append(proc[0])
                if check_process_io(proc[0], p):
                    found = True
    if p.check_io:
        # Remove dead processes from the pid table
        if p.pid_table.keys() != pids:
            for pid in set(p.pid_table.keys()).difference(set(pids)):
                del p.pid_table[pid]
        # At least one pid had some IO activity
        if found:
            return 1
    return 0

# Check the IO activity of a process. The current r/w counts are stored for
# comparison on next runs.
def check_process_io(pid, p):
    debug(logging.DEBUG-5, "    Process found pid=%s, checking for IO activity" % pid)
    io = open("/proc/%s/io" % pid).read().splitlines()
    # IO counts
    rchar = 0
    wchar = 0
    read_bytes = 0
    write_bytes = 0

    # Read the IO counts
    for line in io:
        cols = line.split()
        if cols[0] == "rchar:":
            rchar = int(cols[1])
        if cols[0] == "wchar:":
            wchar = int(cols[1])
        if cols[0] == "read_bytes:":
            read_bytes = int(cols[1])
        if cols[0] == "write_bytes:":
            write_bytes = int(cols[1])
    debug(logging.DEBUG-5, "      Current:  rchar=%s; wchar=%s; rbytes=%s; wbytes=%s" % (rchar, wchar, read_bytes, write_bytes))

    # Compare current IO counts with stored values
    if pid not in p.pid_table:
        debug(logging.DEBUG-5, "      New pid added to the pid table")
        p.pid_table[pid] = [rchar, wchar, read_bytes, write_bytes]
        return True
    else:
        debug(logging.DEBUG-5, "      Previous: rchar=%s; wchar=%s; rbytes=%s; wbytes=%s" % (p.pid_table[pid][0], p.pid_table[pid][1], p.pid_table[pid][2], p.pid_table[pid][3]))
        if p.pid_table[pid][0] == rchar and \
                p.pid_table[pid][1] == wchar and \
                p.pid_table[pid][2] == read_bytes and \
                p.pid_table[pid][3] == write_bytes:
            return False
        else:
            p.pid_table[pid] = [rchar, wchar, read_bytes, write_bytes]
            return True

# Check /dev/*, such that we don't powernap the system if someone
# is actively using a terminal device
def get_console_activity():
    dev = commands.getoutput("ls -t /dev").split('\n')
    c = 0
    d = "/dev/null"
    # Find the most recently touched device
    for d in dev:
      d = "/dev/%s" % d
      debug(logging.DEBUG, "      Examining [%s]" % d)
      if os.path.isdir(d):
          pass
      else:
          t = os.stat(d)
          c = time.time() - t.st_mtime
          break
    i = get_interrupts()
    return c, d, i

# Read keyboard/mouse from /proc/interrupts
# Note: only works for ps2 keyboards/mice
def get_interrupts():
    interrupts = 0
    f = open("/proc/interrupts", "r")
    for line in f.readlines():
        items = line.split()
        source = items.pop()
        if source == "i8042" or source == "keyboard" or source == "mouse":
            items.pop(0)
            items.pop()
            for i in items:
                interrupts += int(i)
    f.close()
    return interrupts

# ###########################################################################
# Main 
# ###########################################################################

# Main loop, search process table, increment counters, take actions, sleep
def powernapd_loop():
    global CONFIG, PROCESSES
    last_a = time.time(), last_i = 0
    warned = False
    while 1:
        debug(logging.DEBUG, "Sleeping [%d] seconds" % CONFIG['interval'])
        time.sleep(CONFIG['interval'])
        # Examine process table, compute absent time of each monitored process
        debug(logging.DEBUG, "Examining process table")
        active_processes = 0
        ps = commands.getoutput("ps -eo pid,args").splitlines()

        # Check console
        c, d, i = get_console_activity()
        if c < CONFIG['absent'] or i != last_i:
           active_processes += 1
        last_i = i

        # Check others
        for p in PROCESSES:
            debug(logging.DEBUG, "  Looking for [%s]" % p.process)
            if find_process(ps, p):
                # process running, so reset absent time
                p.absent_seconds = 0
                debug(logging.DEBUG, "    Process found, reset absent time [%d/%d]" % (p.absent_seconds, CONFIG['absent']))
                active_processes += 1
            else:
                # process not running, increment absent time
                p.absent_seconds += CONFIG['interval']
                debug(logging.DEBUG, "    Process not found, increment absent time [%d/%d]" % (p.absent_seconds, CONFIG['absent']))
                if p.absent_seconds >= CONFIG['absent']:
                    # process missing for >= absent_seconds threshold, mark absent
                    debug(logging.DEBUG, "    Process absent for >= threshold, so mark absent")

        # Determine if action needs to be taken
        if active_processes > 0:
            debug(logging.DEBUG, "    Checking for console or terminal activity")
            last_a = time.time()

            # Inform users of cancellation
            if warned:
                alert_user_cancelled()
                warned = False

        # Absent
        else:
            now    = time.time()
            absent = now - last_a
            debug(logging.DEBUG, "No active monitors detected [absent = %d/%d]" % (absent, CONFIG['absent']))

            # Time is up (take action)
            if ( absert >= CONFIG['absent'] ):
                take_action()

                # Reset (TODO: is this appropriate if we're not actually asleep?)
                warned = False
                last_a = time.time()
                for p in PROCESSES:
                    p.absent_seconds = 0
                    p.pid_table = {}

            # Grace period
            elif CONFIG['absent'] - absent) <= CONFIG['grace']:
                if ( not warned ):
                    alert_user_warning()
                    warned = True

# Main program
if __name__ == '__main__':
    # Ensure that only one instance runs
    daemonize()
    setup_signal_handlers()
    create_pid()
    try:
        # Run the main powernapd loop
        PROCESSES = [Process(p) for p in CONFIG['monitor_procs']]
        PROCESSES.extend([Process(p, True) for p in CONFIG['monitor_io_procs']])
        debug(logging.INFO, "Starting %s" % PKG)
        debug(logging.DEBUG, "Monitored processes %s" % PROCESSES)
        powernapd_loop()
    finally:
        pass
